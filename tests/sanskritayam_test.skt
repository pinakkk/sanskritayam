# sanskritayam_comprehensive_test.skt

# Recursion udaharanam
paribhasha factorial(n):
    yadi n nyoonam 2:
        pratyahar 1
    pratyahar n gunanam factorial(n - 1)

# Conditional statements udaharanam
paribhasha test_conditionals(a, b):
    yadi a adhikam b:
        printayam("a is adhikam than b")
    athavayadi a nyoonam b:
        printayam("a is nyoonam than b")
    anyatha:
        printayam("a is tulyam to b")

# Looping constructs udaharanam
paribhasha test_loops():
    printayam("krte loop:")
    krte i antargatam range(5):
        printayam(i)

    printayam("yjabtakavat loop:")
    i samam 0
    jabtak i nyoonam 5:
        printayam(i)
        i samam i yogah 1

# List manipulation udaharanam
paribhasha test_lists():
    fruits samam ["apple", "banana", "cherry"]
    printayam("Original list:", fruits)

    fruits.append("orange")
    printayam("After appending:", fruits)

    fruits.remove("banana")
    printayam("After removing:", fruits)

    printayam("Length of list:", len(fruits))

# Dictionary manipulation udaharanam
paribhasha test_dictionaries():
    person samam {"name": "John", "age": 30, "city": "New York"}
    printayam("Original dictionary:", person)

    person["occupation"] samam "Engineer"
    printayam("After adding key-value pair:", person)

    del person["city"]
    printayam("After deleting key-value pair:", person)

    printayam("Keys in dictionary:", person.keys())

# Exception handling udaharanam
paribhasha test_exceptions():
    prayatnah:
        x samam 10 bhagaharah 0
        printayam("Result:", x)
    apavadah ZeroDivisionError:
        printayam("Cannot divide by zero!")
    antatah:
        printayam("Exception handling complete.")

# File I/O udaharanam
paribhasha test_file_io():
    file_name samam "test_file.txt"
    content samam "This is a test file."

    # Writing to file
    with open(file_name, "w") as file:
        file.write(content)

    # Reading from file
    with open(file_name, "r") as file:
        printayam("File content:", file.read())

# Object-oriented programming udaharanam
vargah Person:
    paribhasha _init_(self, name, age):
        self.name samam name
        self.age samam age

    paribhasha introduce(self):
        printayam("My name is", self.name, "and I am", self.age, "years old.")

paribhasha test_oop():
    person1 samam Person("Alice", 25)
    person2 samam Person("Bob", 30)

    person1.introduce()
    person2.introduce()

# Main function
paribhasha main():
    printayam("Testing Sanskritayam language features:")

    printayam("\nFactorial udaharanam:")
    printayam("Factorial of 5 is:", factorial(5))

    printayam("\nConditional statements udaharanam:")
    test_conditionals(5, 3)
    test_conditionals(3, 5)
    test_conditionals(5, 5)

    printayam("\nLooping constructs udaharanam:")
    test_loops()

    printayam("\nList manipulation udaharanam:")
    test_lists()

    printayam("\nDictionary manipulation udaharanam:")
    test_dictionaries()

    printayam("\nException handling udaharanam:")
    test_exceptions()

    printayam("\nFile I/O udaharanam:")
    test_file_io()

    printayam("\nObject-oriented programming udaharanam:")
    test_oop()

# Run the main function
main()
